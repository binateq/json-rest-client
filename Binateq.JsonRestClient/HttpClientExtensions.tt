<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace Binateq.JsonRestClient
{
    public static class HttpClientExtensions
    {
        private static HttpContent CreateJsonContent(object dto)
        {
            var json = JsonRestClientSettings.Default.Serialize(dto);

            return new StringContent(json, Encoding.UTF8, "application/json");
        }
<#
	for (int i = 0; i < 8; i++)
	{
		var hasQueryString = (i & 0x0001) != 0;
		var hasContent = (i & 0x0002) != 0;
		var hasCancellation = (i & 0x0004) != 0;

		if (hasContent)
		{
			PrintFunction("Put", hasQueryString, hasContent, hasCancellation);
			PrintProcedure("Put", hasQueryString, hasContent, hasCancellation, true);
			PrintProcedure("Put", hasQueryString, hasContent, hasCancellation, false);
			PrintFunction("Post", hasQueryString, hasContent, hasCancellation);
			PrintProcedure("Post", hasQueryString, hasContent, hasCancellation, true);
			PrintProcedure("Post", hasQueryString, hasContent, hasCancellation, false);
		}
		else
		{
			PrintFunction("Get", hasQueryString, hasContent, hasCancellation);
			PrintGetOrDefault(hasQueryString, hasCancellation);

			PrintFunction("Put", hasQueryString, hasContent, hasCancellation);
			PrintProcedure("Put", hasQueryString, hasContent, hasCancellation, true);
			PrintProcedure("Put", hasQueryString, hasContent, hasCancellation, false);

			PrintFunction("Post", hasQueryString, hasContent, hasCancellation);
			PrintProcedure("Post", hasQueryString, hasContent, hasCancellation, true);
			PrintProcedure("Post", hasQueryString, hasContent, hasCancellation, false);
			
			PrintFunction("Delete", hasQueryString, hasContent, hasCancellation);
			PrintProcedure("Delete", hasQueryString, hasContent, hasCancellation, true);
			PrintProcedure("Delete", hasQueryString, hasContent, hasCancellation, false);
		}
	}

	PrintUriProcedure("Put");
	PrintUriProcedure("PutAndForget");
	PrintUriProcedure("Post");
	PrintUriProcedure("PostAndForget");
	PrintUriProcedure("Delete");
	PrintUriProcedure("DeleteAndForget");

	PrintUriFunction("Get");
	PrintUriFunction("GetOrDefault");
	PrintUriFunction("Put");
	PrintUriFunction("Post");
	PrintUriFunction("Delete");

	PrintUriContentProcedure("Put");
	PrintUriContentProcedure("PutAndForget");
	PrintUriContentProcedure("Post");
	PrintUriContentProcedure("PostAndForget");

	PrintUriContentFunction("Put");
	PrintUriContentFunction("Post");
#>
	}
}
<#+
public void PrintUriContentProcedure(string name)
{
#>
	public static async Task <#=name#>Async(this HttpClient httpClient, FormattableString formattableString, object contentParameter) =>
		await <#=name#>Async(httpClient, httpClient.BaseAddress, formattableString, contentParameter);

	public static async Task <#=name#>Async(this HttpClient httpClient, FormattableString formattableString, IReadOnlyDictionary<string, object> queryStringParameters, object contentParameter) =>
		await <#=name#>Async(httpClient, httpClient.BaseAddress, formattableString, queryStringParameters, contentParameter);

	public static async Task <#=name#>Async(this HttpClient httpClient, FormattableString formattableString, object contentParameter, CancellationToken cancellationToken) =>
		await <#=name#>Async(httpClient, httpClient.BaseAddress, formattableString, contentParameter, cancellationToken);

	public static async Task <#=name#>Async(this HttpClient httpClient, FormattableString formattableString, IReadOnlyDictionary<string, object> queryStringParameters, object contentParameter, CancellationToken cancellationToken) =>
		await <#=name#>Async(httpClient, httpClient.BaseAddress, formattableString, queryStringParameters, contentParameter, cancellationToken);
<#+
}

public void PrintUriContentFunction(string name)
{
#>
	public static async Task<T> <#=name#>Async<T>(this HttpClient httpClient, FormattableString formattableString, object contentParameter) =>
		await <#=name#>Async<T>(httpClient, httpClient.BaseAddress, formattableString, contentParameter);

	public static async Task<T> <#=name#>Async<T>(this HttpClient httpClient, FormattableString formattableString, IReadOnlyDictionary<string, object> queryStringParameters, object contentParameter) =>
		await <#=name#>Async<T>(httpClient, httpClient.BaseAddress, formattableString, queryStringParameters, contentParameter);

	public static async Task<T> <#=name#>Async<T>(this HttpClient httpClient, FormattableString formattableString, object contentParameter, CancellationToken cancellationToken) =>
		await <#=name#>Async<T>(httpClient, httpClient.BaseAddress, formattableString, contentParameter, cancellationToken);

	public static async Task<T> <#=name#>Async<T>(this HttpClient httpClient, FormattableString formattableString, IReadOnlyDictionary<string, object> queryStringParameters, object contentParameter, CancellationToken cancellationToken) =>
		await <#=name#>Async<T>(httpClient, httpClient.BaseAddress, formattableString, queryStringParameters, contentParameter, cancellationToken);
<#+
}

public void PrintUriProcedure(string name)
{
#>
	public static async Task <#=name#>Async(this HttpClient httpClient, FormattableString formattableString) =>
		await <#=name#>Async(httpClient, httpClient.BaseAddress, formattableString);

	public static async Task <#=name#>Async(this HttpClient httpClient, FormattableString formattableString, IReadOnlyDictionary<string, object> queryStringParameters) =>
		await <#=name#>Async(httpClient, httpClient.BaseAddress, formattableString, queryStringParameters);

	public static async Task <#=name#>Async(this HttpClient httpClient, FormattableString formattableString, CancellationToken cancellationToken) =>
		await <#=name#>Async(httpClient, httpClient.BaseAddress, formattableString, cancellationToken);

	public static async Task <#=name#>Async(this HttpClient httpClient, FormattableString formattableString, IReadOnlyDictionary<string, object> queryStringParameters, CancellationToken cancellationToken) =>
		await <#=name#>Async(httpClient, httpClient.BaseAddress, formattableString, queryStringParameters, cancellationToken);
<#+
}

public void PrintUriFunction(string name)
{
#>
	public static async Task<T> <#=name#>Async<T>(this HttpClient httpClient, FormattableString formattableString) =>
		await <#=name#>Async<T>(httpClient, httpClient.BaseAddress, formattableString);

	public static async Task<T> <#=name#>Async<T>(this HttpClient httpClient, FormattableString formattableString, IReadOnlyDictionary<string, object> queryStringParameters) =>
		await <#=name#>Async<T>(httpClient, httpClient.BaseAddress, formattableString, queryStringParameters);

	public static async Task<T> <#=name#>Async<T>(this HttpClient httpClient, FormattableString formattableString, CancellationToken cancellationToken) =>
		await <#=name#>Async<T>(httpClient, httpClient.BaseAddress, formattableString, cancellationToken);

	public static async Task<T> <#=name#>Async<T>(this HttpClient httpClient, FormattableString formattableString, IReadOnlyDictionary<string, object> queryStringParameters, CancellationToken cancellationToken) =>
		await <#=name#>Async<T>(httpClient, httpClient.BaseAddress, formattableString, queryStringParameters, cancellationToken);
<#+
}

public void PrintProcedure(string httpMethod, bool hasQueryString,
	bool hasContent, bool hasCancellation, bool hasValidation)
{
if (hasValidation)
{
#>
		public static async Task <#=httpMethod#>Async(this HttpClient httpClient, Uri baseUri, FormattableString formattableString
<#+
}
else
{
#>
		public static async Task <#=httpMethod#>AndForgetAsync(this HttpClient httpClient, Uri baseUri, FormattableString formattableString
<#+
}
if (hasQueryString)
{
#>
			, IReadOnlyDictionary<string, object> queryStringParameters
<#+
}

if (hasContent)
{
#>
			, object contentParameter
<#+
}

if (hasCancellation)
{
#>
			, CancellationToken cancellationToken
<#+
}
#>
		)
		{
<#+
if (hasQueryString)
{
#>
		    var requestUri = baseUri.Append(formattableString, JsonRestClientSettings.Default.IsShortArraySerialization, queryStringParameters);
<#+
}
else
{
#>
		    var requestUri = baseUri.Append(formattableString);
<#+
}

if (hasContent)
{
#>
			var content = CreateJsonContent(contentParameter);
<#+
}

if (hasValidation)
{
#>
			await httpClient.<#=httpMethod#>Async(requestUri
<#+
	if (hasContent)
	{
#>
				, content
<#+

	}
	else if (httpMethod != "Get" && httpMethod != "Delete")
	{
#>
				, null
<#+
	}
	if (hasCancellation)
	{
#>
				, cancellationToken
<#+
	}
#>
			).ThrowIfInvalidStatusAsync();
<#+
}
else
{
#>
			await httpClient.<#=httpMethod#>Async(requestUri
<#+
	if (hasContent)
	{
#>
				, content
<#+

	}
	else if (httpMethod != "Get" && httpMethod != "Delete")
	{
#>
				, null
<#+
	}
	if (hasCancellation)
	{
#>
				, cancellationToken
<#+
	}
#>
			).ForgetAsync();
<#+
}
#>
		}
<#+
}
#>
<#+
public void PrintFunction(string httpMethod, bool hasQueryString,
	bool hasContent, bool hasCancellation)
{
#>
		public static async Task<T> <#=httpMethod#>Async<T>(this HttpClient httpClient, Uri baseUri, FormattableString formattableString
<#+
if (hasQueryString)
{
#>
			, IReadOnlyDictionary<string, object> queryStringParameters
<#+
}

if (hasContent)
{
#>
			, object contentParameter
<#+
}

if (hasCancellation)
{
#>
			, CancellationToken cancellationToken
<#+
}
#>
		)
		{
<#+
if (hasQueryString)
{
#>
		    var requestUri = baseUri.Append(formattableString, JsonRestClientSettings.Default.IsShortArraySerialization, queryStringParameters);
<#+
}
else
{
#>
		    var requestUri = baseUri.Append(formattableString);
<#+
}

if (hasContent)
{
#>
			var content = CreateJsonContent(contentParameter);
<#+
}
#>
			return await httpClient.<#=httpMethod#>Async(requestUri
<#+
if (hasContent)
{
#>
				, content
<#+

}
else if (httpMethod != "Get" && httpMethod != "Delete")
{
#>
				, null
<#+
}
if (hasCancellation)
{
#>
				, cancellationToken
<#+
}
#>
			).ThrowIfInvalidStatusAsync()
			 .ReadAsync<T>(JsonRestClientSettings.Default.Deserialize);
		}
<#+
}
#>
<#+
public void PrintGetOrDefault(bool hasQueryString, bool hasCancellation)
{
#>
		public static async Task<T> GetOrDefaultAsync<T>(this HttpClient httpClient, Uri baseUri, FormattableString formattableString
<#+
if (hasQueryString)
{
#>
			, IReadOnlyDictionary<string, object> queryStringParameters
<#+
}

if (hasCancellation)
{
#>
			, CancellationToken cancellationToken
<#+
}
#>
		)
		{
<#+
if (hasQueryString)
{
#>
		    var requestUri = baseUri.Append(formattableString, JsonRestClientSettings.Default.IsShortArraySerialization, queryStringParameters);
<#+
}
else
{
#>
		    var requestUri = baseUri.Append(formattableString);
<#+
}
#>
			return await httpClient.GetAsync(requestUri
<#+
if (hasCancellation)
{
#>
				, cancellationToken
<#+
}
#>
			).ReadOrDefaultOrThrowAsync<T>(JsonRestClientSettings.Default.Deserialize);
		}
<#+
}
#>