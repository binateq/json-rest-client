<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;

namespace Binateq.JsonRestClient
{
    public partial class JsonRestClient
    {
<#
	for (int i = 0; i < 16; i++)
	{
		var hasQueryString = (i & 0x0001) != 0;
		var hasContent = (i & 0x0002) != 0;
		var hasCancellation = (i & 0x0004) != 0;
		var hasValidation = (i & 0x0008) != 0;

		if (hasContent)
		{
			PrintFunction("Put", hasQueryString, hasContent, hasCancellation, hasValidation);
			PrintProcedure("Put", hasQueryString, hasContent, hasCancellation, hasValidation);
			PrintFunction("Post", hasQueryString, hasContent, hasCancellation, hasValidation);
			PrintProcedure("Post", hasQueryString, hasContent, hasCancellation, hasValidation);
		}
		else
		{
			PrintFunction("Get", hasQueryString, hasContent, hasCancellation, hasValidation);
			PrintFunction("Put", hasQueryString, hasContent, hasCancellation, hasValidation);
			PrintProcedure("Put", hasQueryString, hasContent, hasCancellation, hasValidation);
			PrintFunction("Post", hasQueryString, hasContent, hasCancellation, hasValidation);
			PrintProcedure("Post", hasQueryString, hasContent, hasCancellation, hasValidation);
			PrintFunction("Delete", hasQueryString, hasContent, hasCancellation, hasValidation);
			PrintProcedure("Delete", hasQueryString, hasContent, hasCancellation, hasValidation);
		}
	}
#>
	}
}
<#+
public void PrintProcedure(string httpMethod, bool hasQueryString,
	bool hasContent, bool hasCancellation, bool hasValidation)
{

if (hasValidation)
{
#>
		public async Task Throwable<#=httpMethod#>Async(FormattableString formattableString
<#+
}
else
{
#>
		public async Task <#=httpMethod#>Async(FormattableString formattableString
<#+
}
if (hasQueryString)
{
#>
			, IReadOnlyDictionary<string, object> queryStringParameters
<#+
}

if (hasContent)
{
#>
			, object contentParameter
<#+
}

if (hasCancellation)
{
#>
			, CancellationToken cancellationToken
<#+
}
#>
		)
		{
<#+
if (hasQueryString)
{
#>
            var requestUri = BuildUri(formattableString, queryStringParameters);
<#+
}
else
{
#>
            var requestUri = BuildUri(formattableString);
<#+
}

if (hasContent)
{
#>
			var content = CreateJsonContent(contentParameter);
<#+
}
#>
			await httpClient.<#=httpMethod#>Async(requestUri
<#+
if (hasContent)
{
#>
				, content
<#+

}
else if (httpMethod != "Get" && httpMethod != "Delete")
{
#>
				, null
<#+
}
if (hasCancellation)
{
#>
				, cancellationToken
<#+
}
#>
			)
<#+
if (hasValidation)
{
#>
				.ThrowIfInvalidStatusAsync()
<#+
}
#>
			;
		}
<#+
}
#>
<#+
public void PrintFunction(string httpMethod, bool hasQueryString,
	bool hasContent, bool hasCancellation, bool hasValidation)
{

if (hasValidation)
{
#>
		public async Task<T> Throwable<#=httpMethod#>Async<T>(FormattableString formattableString
<#+
}
else
{
#>
		public async Task<T> <#=httpMethod#>Async<T>(FormattableString formattableString
<#+
}
if (hasQueryString)
{
#>
			, IReadOnlyDictionary<string, object> queryStringParameters
<#+
}

if (hasContent)
{
#>
			, object contentParameter
<#+
}

if (hasCancellation)
{
#>
			, CancellationToken cancellationToken
<#+
}
#>
		)
		{
<#+
if (hasQueryString)
{
#>
            var requestUri = BuildUri(formattableString, queryStringParameters);
<#+
}
else
{
#>
            var requestUri = BuildUri(formattableString);
<#+
}

if (hasContent)
{
#>
			var content = CreateJsonContent(contentParameter);
<#+
}
#>
			return await httpClient.<#=httpMethod#>Async(requestUri
<#+
if (hasContent)
{
#>
				, content
<#+

}
else if (httpMethod != "Get" && httpMethod != "Delete")
{
#>
				, null
<#+
}
if (hasCancellation)
{
#>
				, cancellationToken
<#+
}
#>
			)
<#+
if (hasValidation)
{
#>
				.ThrowIfInvalidStatusAsync()
<#+
}
#>
				.ReadContentAsync<T>(settings.Deserialize)
			;
		}
<#+
}
#>
